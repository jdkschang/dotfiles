"  Vim plug
" https://github.com/junegunn/vim-plug
" ------------------------------------------------------------------------------

let g:plugin_path = '~/.config/nvim/plugged'

call plug#begin(g:plugin_path)

" Theme
" ------------------------------------------------------------------------------

Plug 'NLKNguyen/papercolor-theme'
Plug 'morhetz/gruvbox'
Plug 'dylanaraps/wal.vim'

" tmux
" ------------------------------------------------------------------------------

if executable('tmux')
  " Navigate between vim and tmux splits
  Plug 'christoomey/vim-tmux-navigator'
  " Restore `FocusLost` and `FocusGained` events in tmux
  Plug 'tmux-plugins/vim-tmux-focus-events'
endif

" Finding and replacing
" ------------------------------------------------------------------------------

" Find and replace in project
Plug 'eugen0329/vim-esearch'
" Fuzzy finding anything
Plug 'junegunn/fzf', {'dir': '~/.fzf', 'do': './install --all'}
" fzf integration for Vim
Plug 'junegunn/fzf.vim'
" Improved search in Vim
Plug 'junegunn/vim-slash'

" File management
" ------------------------------------------------------------------------------

" Console File Manager
Plug 'francoiscabrol/ranger.vim'
" neovim dep for ranger
Plug 'rbgrouleff/bclose.vim'

" File browser
Plug 'scrooloose/nerdtree'
" Easy directory browsing with `-`, integrates with NERDTree
Plug 'tpope/vim-vinegar'

" Buffers
" ------------------------------------------------------------------------------

" Close all buffers except current
Plug 'schickling/vim-bufonly'
" Close buffers without losing window layout
Plug 'moll/vim-bbye'
" Manage buffers in a list
Plug 'jlanzarotta/bufexplorer'
" Scratch pad
Plug 'vim-scripts/scratch.vim'

" Language pack
" ------------------------------------------------------------------------------

" Syntax and highlighting for every language
Plug 'sheerun/vim-polyglot'
Plug 'blockloop/vim-swigjs'

" Tags
" ------------------------------------------------------------------------------

" Generates ctags automatically
Plug 'ludovicchabant/vim-gutentags'

" Editing
" ------------------------------------------------------------------------------

" Insert or delete brackets, parens, quotes in pair.
Plug 'jiangmiao/auto-pairs'
" Display indent levels
Plug 'tpope/vim-repeat'
" Comment out blocks of code
Plug 'tpope/vim-commentary'
" Toggle location and quickfix lists
Plug 'Valloric/ListToggle'
" Advanced movement similar to motions
Plug 'justinmk/vim-sneak'
" Correct common typos
Plug 'chip/vim-fat-finger'
" Keep folds performant
Plug 'Konfekt/FastFold'
" Move between windows and allow swapping position
Plug 't9md/vim-choosewin'
" Remember cursor position in closed buffers
Plug 'dietsche/vim-lastplace'
" Open files from Quickfix
Plug 'yssl/QFEnter'
" Move blocks of code with ALT+j/k
Plug 'matze/vim-move'
" Super Focus
Plug 'junegunn/limelight.vim'

" Text objects
" ------------------------------------------------------------------------------

" Allow motions like `w`, `b` and `iw` to work on camel case
Plug 'chaoren/vim-wordmotion'
" Improve text objects for arguments, brackets etc
Plug 'wellle/targets.vim'
" Move arguments
Plug 'AndrewRadev/sideways.vim'
" Add various text objects
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-function'
" aE
Plug 'kana/vim-textobj-entire'
" al
Plug 'kana/vim-textobj-line'
" af
Plug 'thinca/vim-textobj-function-javascript', {'for': ['javascript', 'javascript.jsx', 'json']}
" ac
Plug 'coderifous/textobj-word-column.vim'
" ax
Plug 'whatyouhide/vim-textobj-xmlattr'
" Swap words
Plug 'tommcdo/vim-exchange'

" General
" ------------------------------------------------------------------------------

" Set spaces and other settings on a per project basis
Plug 'editorconfig/editorconfig-vim'
" GUI for the undo tree
Plug 'mbbill/undotree', {'on': 'UndotreeToggle'}
" Whitespace removal
Plug 'ntpeters/vim-better-whitespace'

" Refactoring
" ------------------------------------------------------------------------------

" Split and join HTML tags, JS objects etc
Plug 'AndrewRadev/splitjoin.vim'
" Make it easy to add/remove/change brackets, quotes etc
Plug 'tpope/vim-surround'

" Copy/Paste behaviour
" ------------------------------------------------------------------------------

" Stop everything saving to a register and instead rely on just `m` for cut
Plug 'svermeulen/vim-easyclip'
" Improve pasting code from the clipboard
Plug 'ConradIrwin/vim-bracketed-paste'

" Sessions
" ------------------------------------------------------------------------------

Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'

" Status bar
" ------------------------------------------------------------------------------

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Tabs
" ------------------------------------------------------------------------------

" Make managing tabs easier with rename, add, delete etc
Plug 'gcmt/taboo.vim'
" Allow a window to be fully viewed. Useful when multiple splits are in use
Plug 'troydm/zoomwintab.vim'

" Snippets
" ------------------------------------------------------------------------------

Plug 'epilande/vim-react-snippets'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'


" Testing
" ------------------------------------------------------------------------------

Plug 'tpope/vim-cucumber'

" Git
" ------------------------------------------------------------------------------

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'airblade/vim-gitgutter'
Plug 'junegunn/gv.vim'

" Linting
" ------------------------------------------------------------------------------

Plug 'w0rp/ale'
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'for': ['javascript', 'typescript', 'css', 'scss', 'json', 'graphql']}

" HTML/CSS
" ------------------------------------------------------------------------------

" Highlight css colors with their color
Plug 'ap/vim-css-color', {'for': ['css', 'scss']}
" Easy HTML and CSS generation
Plug 'mattn/emmet-vim'
" Automatically add a closing HTML tag
Plug 'alvan/vim-closetag'
" Better Scss highlighting than polyglot
Plug 'tpope/vim-haml'
" Highlight surrounding HTML tags
Plug 'valloric/MatchTagAlways'

" JavaScript
" ------------------------------------------------------------------------------

Plug 'pangloss/vim-javascript', {'for': ['javascript', 'javascript.jsx']}
Plug 'moll/vim-node', {'for': ['javascript', 'javascript.jsx', 'json']}
Plug 'alampros/vim-styled-jsx'
Plug 'Galooshi/vim-import-js'
Plug 'styled-components/vim-styled-components'

" Autocomplete
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'carlitux/deoplete-ternjs'

" Org Mode
Plug 'jceb/vim-orgmode'

call plug#end()
" Shortcut for checking if a plugin is loaded
function! s:has_plugin(plugin)
  let lookup = 'g:plugs["' . a:plugin . '"]'
  return exists(lookup)
endfunction


"  General config
" ------------------------------------------------------------------------------

" Theme
set background=dark

" true color for gruvbox
let $NVIM_TUI_ENABLE_TRUE_COLOR = 1
let g:gruvbox_contrast_dark = 'hard'

" focus mode
" default: 0.5
let g:limelight_default_coefficient = 0.8
" default: 0
let g:limelight_paragraph_span = 1
" Beginning/end of paragraph
"   When there's no empty line between the paragraphs
"   and each paragraph starts with indentation
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'
nmap <leader>l :Limelight!!<cr>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags='li\|p'

inoremap jj <ESC>

" Set <,> to leader
let mapleader = ','
let maplocalleader='\'


nmap <leader>ne :NERDTree<cr>
map <C-\> :NERDTreeToggle<cr>
map <leader><tab> :Sscratch<cr>
map <leader><S-tab> :Scratch<cr>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Turn off swapfiles
set noswapfile
set nobackup
set nowb

" Allow editing of binary files
" Must be set before expandtab
" http://stackoverflow.com/a/26901774
set binary

" Enable term 24 bit colour
set termguicolors

" Make it obvious where 80 characters is
set textwidth=80
" set colorcolumn=+1

" Use ``indent`` based folding
set foldmethod=indent

" Disable all folds on file open until `zc` or `zM` etc is used
set nofoldenable

" With :set hidden, opening a new file when the current buffer has unsaved
" changes causes files to be hidden instead of closed
set hidden

" Allow tab names to be remembered in sessions
set sessionoptions+=tabpages,globals

" Briefly move the cursor to the matching brace
set showmatch

" Lazyredraw attempts to solve Vim lag by reducing the amount of
" processing required. When enabled, any action that is not typed
" will not cause the screen to redraw
set lazyredraw

" Don't display the current mode (Insert, Visual, Replace)
" in the status line. This info is already shown in the
" Airline status bar.
set noshowmode

" Stop vim trying to syntax highlight long lines, typically found in minified
" files. This greatly reduces lag yet is still wide enough for large displays
set synmaxcol=500

" Highlight current line
set cursorline

" Indent using two spaces.
set softtabstop=2
set tabstop=2
set shiftwidth=2

" Smoother scrolling when moving horizontally
set sidescroll=1

" Use spaces, not tabs
set expandtab

" Don't scan included files. The .tags file is more performant.
set complete-=i
set complete+=kspell

" Prevent autocomplete options opening in scratchpad
set completeopt-=preview

" This is set low so that gitgutter updates reasonably quickly
" https://github.com/airblade/vim-gitgutter#when-are-the-signs-updated
set updatetime=300

" Don't wrap lines
set nowrap

" Keep the cursor in the same place when switching buffers
set nostartofline

" Show col and line position in the statusbar
set ruler

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Ignore case of searches
set ignorecase

" If a pattern contains an uppercase letter
" it is case sensitive, otherwise, it is not
set smartcase

" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed

" Spell check
set spelllang=en

" Where it should get the dictionary files
let g:spellfile_URL = 'http://ftp.vim.org/vim/runtime/spell'

" For autocompletion, complete as much as you can.
set wildmode=list:longest,full

" don't add extra space after ., !, etc. when joining
set nojoinspaces

" Eliminate delay when switching modes
set ttimeoutlen=0

" Auto save changes before switching buffer
set autowrite

" Add the g flag to search/replace by default
set gdefault

" Centralize backups, swapfiles and undo history
set backupdir=~/.config/nvim/backups
set directory=.,$TEMP " Stop the swp file warning

if has("persistent_undo")
  set undodir=~/.config/nvim/undo
  set undofile
  set undolevels=1000
  set undoreload=10000
endif

" Don’t create backups when editing files in certain directories
set backupskip=/tmp/*,/private/tmp/*

" Respect modeline in files
set modeline
set modelines=4

" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure

" Show “invisible” characters
set lcs=tab:▸\ ,trail:·,nbsp:_
set list

" Disable error bells
set noerrorbells

" Don't show the intro message when starting Vim
" Also suppress several 'Press Enter to continue messages' especially
" with FZF
set shortmess=aoOtIWcFs

" Show the current mode
set title

" Show the (partial) command as it’s being typed
set showcmd

" Line numbers
set number
set relativenumber

" Path and file extensions to look for when using `gf`
set suffixesadd+=.css,index.css
set path+=node_modules

" Start scrolling before cursor gets to the edge
set scrolloff=5
set sidescrolloff=15
set sidescroll=1

" Remap annoying mistakes to something useful
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev q: :q
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Qa q
cnoreabbrev Qall qall

" Key mappings
" ------------------------------------------------------------------------------

" Save file
nnoremap <silent><leader>w :silent w<cr>

" Switch to last buffer
nnoremap <leader><leader> <C-^>

" Force j and k to work on display lines
nnoremap k gk
nnoremap j gj
vnoremap k gk
vnoremap j gj

" Map <C-i> to <f7> with Karabiner so tab can be used at the same time
nnoremap <f7> <C-i>

" Disable arrow keys
noremap <right> <Nop>
noremap <left> <Nop>
noremap <up> <Nop>
noremap <down> <Nop>

" Delete line but preserve the space
nnoremap dD S<Esc>

" Make `Y` work from the cursor to the end of line
nnoremap Y y$

" Reformat whole file and move back to original position
nnoremap g= gg=G``

" Use K to join current line with line above, just like J does with line below
nnoremap K kJ

" Automatically jump to end of pasted text
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" Split
noremap <silent><leader>x :split<cr>
noremap <silent><leader>v :vsplit<cr>

" Switch buffers
nnoremap <silent>H :silent bp<CR>
nnoremap <silent>L :silent bn<CR>

" Spellcheck
nnoremap <F6> :setlocal spell!<cr>

" Clear search (highlight)
nnoremap <silent> <leader>k :noh<cr>

" Automatically 'gv' (go to previously selected visual block)
" after indenting or unindenting.
vnoremap < <gv
vnoremap > >gv

" Press enter for newline without insert
nnoremap <cr> o<esc>

" Allow sourcing of vimrc
nnoremap <leader>y :source $MYVIMRC<cr>

" scroll options
" :map <ScrollWheelUp> <C-Y>
" :map <S-ScrollWheelUp> <C-U>
" :map <ScrollWheelDown> <C-E>
" :map <S-ScrollWheelDown> <C-D>

if exists(':tnoremap')
  " Allow movement seamlessly with terminals
  tnoremap <C-h> <C-\><C-n><C-w>h
  tnoremap <C-j> <C-\><C-n><C-w>j
  tnoremap <C-k> <C-\><C-n><C-w>k
  tnoremap <C-l> <C-\><C-n><C-w>l
endif

"  Plugin config
" ------------------------------------------------------------------------------
if s:has_plugin('vim-textobj-entire')
  let g:textobj_entire_no_default_key_mappings = 1
  xmap aE <Plug>(textobj-entire-a)
  omap aE <Plug>(textobj-entire-a)
  xmap iE <Plug>(textobj-entire-i)
  omap iE <Plug>(textobj-entire-i)
endif

if s:has_plugin('undotree')
  let g:undotree_WindowLayout = 2
  nnoremap <f5> :UndotreeToggle<cr>
endif

if s:has_plugin('ultisnips')
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpForwardTrigger="<tab>"
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

if s:has_plugin('vim-prettier')
  let g:prettier#exec_cmd_async = 1
  nmap <leader>o <Plug>(Prettier)
endif

if s:has_plugin('bufexplorer')
  let g:bufExplorerDisableDefaultKeyMapping = 1
  let g:bufExplorerShowNoName = 1
  nnoremap <leader>B :BufExplorer<cr>
endif

if s:has_plugin('vim-easyclip')
  let g:EasyClipUseSubstituteDefaults = 0
  let g:EasyClipUsePasteDefaults = 0
  nmap s <plug>SubstituteOverMotionMap
  xmap s <plug>XEasyClipPaste
  imap <c-v> <plug>EasyClipInsertModePaste
  " Place a mark (m taken by easyclip)
  nnoremap gm m
endif

if s:has_plugin('sideways.vim')
  nnoremap ]j :SidewaysRight<cr>
  nnoremap [j :SidewaysLeft<cr>
endif

if s:has_plugin('vim-vinegar')
  " Remap as this is too easy to hit by accident with 0 and = nearby
  autocmd VimEnter * nmap - <nop>
  autocmd VimEnter * nmap _ <Plug>VinegarUp
endif

if s:has_plugin('vim-gutentags')
  let g:gutentags_ctags_tagfile = 'vim_tags'
  let g:gutentags_ctags_exclude = [
        \ 'node_modules',
        \ 'dist',
        \ 'vendor',
        \ 'bower_components']
endif

if s:has_plugin('vim-bufonly')
  nnoremap <leader>b :BufOnly<cr>
endif

if s:has_plugin('vim-javascript')
  let g:javascript_plugin_flow=1
  let g:javascript_plugin_jsdoc=1
endif

if s:has_plugin('vim-better-whitespace')
  autocmd BufEnter * EnableStripWhitespaceOnSave
  highlight ExtraWhitespace ctermbg=red guibg = #e06c75
endif

if s:has_plugin('vim-sneak')
  let g:sneak#use_ic_scs = 0
  nmap <leader>s <Plug>Sneak_s
  nmap <leader>S <Plug>Sneak_S
  xmap <leader>s <Plug>Sneak_s
  xmap <leader>S <Plug>Sneak_S
  let g:sneak#streak = 1
endif

if s:has_plugin('deoplete.nvim')
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_complete_start_length = 1
  let g:deoplete#sources = {}
  let g:deoplete#sources.python = ['ultisnips']
  let g:deoplete#sources.javascript = ['buffer', 'tern']
endif

if s:has_plugin('deoplete-ternjs')
  let g:deoplete#sources#ternjs#types = 1
  let g:deoplete#sources#ternjs#filetypes = [
        \ 'js',
        \ 'jsx',
        \ 'javascript.jsx',
        \ ]
endif

if s:has_plugin('MatchTagAlways')
  let g:mta_filetypes = {
        \ 'html' : 1,
        \ 'xhtml' : 1,
        \ 'xml' : 1,
        \ 'jinja' : 1,
        \ 'javascript': 1,
        \}
nnoremap <leader>% :MtaJumpToOtherTag<cr>
endif

if s:has_plugin('vim-session')
  let g:session_autosave = 'yes'
  let g:session_autoload = 'no'
endif

if s:has_plugin('vim-polyglot')
  let g:polyglot_disabled = ['markdown', 'scss']
  let g:jsx_ext_required = 0
endif

if s:has_plugin('splitjoin.vim')
  let g:splitjoin_split_mapping = ''
  let g:splitjoin_join_mapping = ''
  nmap gj :SplitjoinSplit<cr>
  nmap gk :SplitjoinJoin<cr>
endif

if s:has_plugin('vim-closetag')
  let g:closetag_filenames = "*.html,*.js,*.jsx"
  let g:closetag_close_shortcut = ''
endif

if s:has_plugin('vim-choosewin')
  nmap  <leader>h <plug>(choosewin)
  let g:choosewin_label_fill = 0
  let g:choosewin_blink_on_land = 0
endif

if s:has_plugin('auto-pairs')
  let g:AutoPairsCenterLine = 0
endif

if s:has_plugin('vim-bbye')
  nnoremap <silent>Q :silent Bdelete<cr>
endif

if s:has_plugin('taboo.vim')
  let g:taboo_tabline = 0 " Let airline handle it all
  let g:taboo_renamed_tab_format = '%l%m'
  nnoremap th :tabprev<cr>
  nnoremap tl :tabnext<cr>
  nnoremap tn :tabnew<cr>
  nnoremap td :tabclose<cr>
  nnoremap to :TabooOpen<space>
  nnoremap tr :TabooRename<space>
endif

if s:has_plugin('nerdtree')
  let g:NERDTreeWinSize = 30
  let NERDTreeIgnore = ['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
  let NERDTreeShowHidden = 1
  let NERDTreeHijackNetrw = 1
  let NERDTreeAutoDeleteBuffer = 1
endif

if s:has_plugin('gv.vim')
  nnoremap <c-g> :GV!<cr>
endif

if s:has_plugin('fzf.vim')
  let g:fzf_height = '30%'
  let g:fzf_commits_log_options = '--color --graph --pretty=format:"%C(yellow)%h%Creset -%C(auto)%d%Creset %s %C(bold blue)(%cr) %Cred<%an>%Creset" --abbrev-commit'

  nnoremap <c-p> :FZF<cr>
  nnoremap <c-i> :Buffers<cr>
  nnoremap <c-t> :BLines<cr>
  nnoremap <c-space> :Ag<cr>
  nnoremap <silent> <BS> :History:<cr>

  " Allow options to be passed to FZF :Ag
  " Probably quite hacky until a better solution appears
  " https://github.com/junegunn/fzf.vim/issues/92#issuecomment-191248596
  function! s:ag_with_opts(arg, bang)
    let tokens  = split(a:arg)
    let ag_opts = join(filter(copy(tokens), 'v:val =~ "^-"'))
    let query   = join(filter(copy(tokens), 'v:val !~ "^-"'))
    call fzf#vim#ag(query, '--hidden --ignore .git', a:bang ? {} : {'down': '40%'})
  endfunction

  if has('autocmd')
    autocmd VimEnter * command! -nargs=* -bang Ag call s:ag_with_opts(<q-args>, <bang>0)
  endif
endif

if s:has_plugin('ListToggle')
  let g:lt_height = 8
endif

if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag with ack.vim - https://github.com/ggreer/the_silver_searcher#vim
  let g:ackprg = 'ag --smart-case --nogroup --nocolor --column'
endif

if executable('jq')
  " JSON beautifier
  nnoremap <leader>z :%!jq '.'<cr>
endif

if s:has_plugin('vim-airline')
  let g:airline#extensions#branch#enabled = 1
  let g:airline_theme='gruvbox'
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tmuxline#enabled = 0
  let g:airline#extensions#tabline#enabled = 1 " Enable the list of buffers
  let g:airline#extensions#tabline#buffers_label = ''
  let g:airline#extensions#tabline#fnamemod = ':t' " Show the filename
  let g:airline#extensions#tabline#fnamecollapse = 0
  let g:airline#extensions#tabline#show_tab_nr = 0
  let g:airline#extensions#tabline#buffer_nr_show = 0
  let g:airline#extensions#tabline#show_close_button = 0
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline#extensions#default#layout = [
        \ [ 'a', 'b', 'c' ],
        \ [ 'x', 'z', 'error', 'warning' ]
        \ ]
endif

if s:has_plugin('vim-gitgutter')
  let g:gitgutter_sign_added = '•'
  let g:gitgutter_sign_modified = '•'
  let g:gitgutter_sign_removed = '•'
  let g:gitgutter_sign_modified_removed = '•'
  let g:gitgutter_map_keys = 0
  nmap [c <Plug>GitGutterPrevHunk
  nmap ]c <Plug>GitGutterNextHunk
endif

if s:has_plugin('ale')
  let g:ale_sign_error = 'x'
  let g:ale_sign_warning = '~'
  let airline#extensions#ale#error_symbol = 'Err: '
  let airline#extensions#ale#warning_symbol = 'Warn: '
  let g:ale_echo_msg_format = '%linter% | %s (%code%)'
  let g:ale_lint_on_text_changed = 'always'
  let g:ale_linters = {'html': []}
  " Fix JavaScript code with ESlint
  let g:ale_fixers = {}
  let g:ale_fixers.javascript = ['eslint']
  let g:ale_fix_on_save = 1
endif

if s:has_plugin('emmet-vim')
  imap hh <C-y>,
endif

" Output the current syntax group
nnoremap <f10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<cr>

" Automatic commands
" ------------------------------------------------------------------------------

augroup always-open-signcolumn
  autocmd!
  autocmd BufEnter * sign define dummy
  autocmd BufEnter * execute 'sign place 9999 line=1 name=dummy buffer=' . bufnr('')
augroup END

" Open help in a vertical split
augroup vimrc-help
  autocmd!
  autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | setlocal relativenumber | endif
augroup END

augroup file-types
  autocmd!

  " Override some syntaxes so things look better
  autocmd BufNewFile,BufRead *.html setlocal syntax=swig
  autocmd BufNewFile,BufRead *.sss setlocal syntax=stylus
  autocmd BufNewFile,BufRead *.ts,*.snap*,*.es6,*.tsx setlocal filetype=javascript.jsx
  autocmd BufNewFile,BufRead *stylelintrc,*eslintrc,*babelrc,*jshintrc setlocal syntax=json
  autocmd BufNewFile,BufRead *.css setlocal syntax=scss
  autocmd BufNewFile,BufRead *.cshtml setlocal filetype=cshtml

  " Wrap text and turn on spell for markdown files
  autocmd BufNewFile,BufRead *.md setlocal wrap linebreak spell filetype=markdown

  " Automatically wrap at 72 characters and spell check git commit messages
  autocmd FileType gitcommit setlocal textwidth=72
  autocmd FileType gitcommit setlocal spell

  " Allow stylesheets to autocomplete hyphenated words
  autocmd FileType css,scss,sass setlocal iskeyword+=-
augroup END

" Switch between normal and relative line numbers and cursorline
" when switching modes
augroup highlight-when-switching-modes
  autocmd!
  autocmd InsertEnter * setlocal number norelativenumber nocursorline
  autocmd InsertLeave * setlocal relativenumber cursorline
  autocmd WinEnter    * setlocal cursorline
  autocmd WinLeave    * setlocal nocursorline
augroup END

" Periodically check for file changes
augroup checktime
  autocmd!
  autocmd CursorHold * silent! checktime
augroup END

" Resize splits when vim changes size (like with tmux opening/closing)
augroup auto-resize
  autocmd!
  autocmd VimResized * wincmd =
augroup END

" Autocomplete
augroup omnifuncs
  autocmd!
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup endif

colo gruvbox
