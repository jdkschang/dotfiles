;; Personal Info {{{

[user]
	name = Jonathan D. Chang
	email = 6375175+jdkschang@users.noreply.github.com
	signingKey = F25BE343AF08C240

[github]
	user = jdkschang

[include]
	path = ~/.config/git/config.local

;; }}}
;; Main {{{

[core]
	filemode = true
	quotepath = false
	pager = diff-so-fancy | less --tabs=4 -RFX
	excludesFile = ~/.config/git/ignore
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

[http]
	sslVerify

[commit]
	template = ~/.config/git/message
	;; gpgSign = true

[gpg]
	program = gpg

;; }}}
;; Commands {{{

[help]
  autocorrect = 1
[branch]
	autosetuprebase = always
[fetch]
	prune = true

[push]
	default = current

[pull]
	rebase = true

[rebase]
	autoStash = true

;; }}}
;; Aliases {{{

[alias]
	aliases=!git config -l | grep '^alias' | cut -c 7- | sort
	# list aliases
	la = "!git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1 => \\2/' | grep -v 'alias'| awk 'BEGIN { FS = \"=>\" }{ printf(\"%-20s=>%s\\n\", $1,$2)}'|sort"
	sdiff = "!git diff && git submodule foreach 'git diff'"
	spush = push --recurse-submodules=on-demand
	supdate = submodule update --remote --merge

	# Status & History
	# View the current working tree status using the short format
	s = status -s
	st = status
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	ll = log --graph --date=relative --topo-order --pretty='format:%C(yellow)%h%C(yellow)%d %Cblue%ar %Cgreenby %an%Creset -- %s'
	lg = log --color --graph --pretty=format:'%C(yellow)%h%Creset -%C(auto)%d%Creset %s %C(bold blue)(%cr) %Cred<%an>%Creset' --abbrev-commit
	hist = log --all --stat --graph

	standup = log --since='yesterday' --author='Jonathan D. Chang'
	latest = for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short) [%(committername)]'

	# Commits
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	c = commit
	# Commit all changes
	ca = !git add -A && git commit -av
	# Amend to the last commit
	amend = commit --amend

	# get desc of current repo
	desc = !git config --get "branch.$(git rev-parse --abbrev-ref HEAD).description"
	# show authors
	authors = "!f() { git log --no-merges --pretty='format:%<(26)%an <%ae>' --author \"$*\" | sort | uniq; }; f"
	# Credit an author on the last commit
	cauthor = "!f() { git commit --amend --no-edit --author \"$1 <$2>\" -C HEAD; }; f"

	# Diffs
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	wc = whatchanged --abbrev-commit --date=relative --date-order --pretty='format:%Cgreen%h %Cblue%ar %Credby %an%Creset -- %s' -n 45
	# Clone a repository including all submodules
	cl = clone --recursive

	# Branches
	b = branch
	# list branches
	br = branch -a
	# list branches sorted by last modified
	brs = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"

	# Delete all branches that were merged into the current branch
	brd = "!sh -c \"git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d\""
	# Delete all branches that were merged into master
	brdm = "!sh -c \"git checkout master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d\""

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	remotes = remote -v

	co = checkout
	# Switch to a branch, creating it if necessary
	go = checkout -B

	# unstage all changes
	unstage = reset HEAD --

	# Rebase/ Merge
	# Interactive rebase with the given number of latest commits
	# reb = "!git rebase -i `git merge-base HEAD master`"
	# https://stackoverflow.com/questions/27116671/automatically-stash-save-pop-changes-on-git-rebase
	reb = "!git rebase -i --autosquash --autostash <tree-ish>"
	# dry run: Test merge for conflicts
	mergetest = "!f(){ git merge --no-commit --no-ff \"$1\"; git merge --abort; echo \"Merge aborted\"; };f "
	me = merge

;; }}}
;; Color {{{
[color]
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = green
	changed = red
	untracked = cyan

[color "diff-highlight"]
	oldNormal = "red bold"
	oldHighlight = "red bold 52"
	newNormal = "green bold"
	newHighlight = "green bold 22"

;; }}}

# URL shorthands
[url "git@github.com:jdkschang/"]
	insteadOf = "jdkschang:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "https://github.com/"]
	insteadOf = "github:"

[diff]
	tool = Kaleidoscope
[difftool]
	prompt = false
[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[merge]
	tool = Kaleidoscope
	keepBackup = false
[mergetool]
	prompt = false
	keepBackup = false
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true
