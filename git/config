[user]
	name = Jonathan D. Chang
	email = jdkschang@apple.com
	signingKey = 50C3D91E4C96CE4A

[core]
	filemode = true
	quotepath = false
	pager = diff-so-fancy | less --tabs=4 -RFX
	whitespace = trailing-space


[github]
	user = jdkschang

[commit]
	template = ~/.config/git/message
	gpgSign = true

[gpg]
	program = gpg

[help]
	autocorrect = 1

[branch]
	autosetuprebase = always

[fetch]
	prune = true

[push]
	default = current

[pull]
	rebase = true

[rebase]
	autosquash = true

[diff]
	tool = patience


[alias]
	# list aliases
	aliases=!git config -l | grep '^alias' | cut -c 7- | sort
	la = "!git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1 => \\2/' | grep -v 'alias'| awk 'BEGIN { FS = \"=>\" }{ printf(\"%-20s=>%s\\n\", $1,$2)}'|sort"

	# Status & History
	# View the current working tree status using the short format
	s = status -s
	st = status
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	ll = log --graph --date=relative --topo-order --pretty='format:%C(yellow)%h%C(yellow)%d %Cblue%ar %Cgreenby %an%Creset -- %s'
	lg = log --color --graph --pretty=format:'%C(yellow)%h%Creset -%C(auto)%d%Creset %s %C(bold blue)(%cr) %Cred<%an>%Creset' --abbrev-commit
	ls = ls-files
	hist = log --all --stat --graph

	standup = log --since='yesterday' --author='Jonathan D. Chang'
	latest = for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short) [%(committername)]'

	# Commits
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	c = commit
	# Commit all changes
	ca = !git add -A && git commit -av
	# Amend to the last commit
	amend = commit --amend
	fixup = commit --fixup
	squash = commit --squash

	# get desc of current repo
	desc = !git config --get "branch.$(git rev-parse --abbrev-ref HEAD).description"
	# show authors
	authors = "!f() { git log --no-merges --pretty='format:%<(26)%an <%ae>' --author \"$*\" | sort | uniq; }; f"
	ranked-authors = !git authors | sort | uniq -c | sort -n
	reset-authors = commit --amend --reset-author -CHEAD
	# Reset
	# unstage all changes
	unadd = reset HEAD
	unstage = reset HEAD
	undo-commit = reset --soft "HEAD^"
	clean = reset --hard

	# Diffs
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	wc = whatchanged --abbrev-commit --date=relative --date-order --pretty='format:%Cgreen%h %Cblue%ar %Credby %an%Creset -- %s' -n 45

	# Clone
	# Clone a repository including all submodules
	cl = clone --recursive

	# Fetch
	fa = fetch --all

	# Branches
	b = branch
	# list branches
	br = branch -a
	# list branches sorted by last modified
	brs = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"

	# Delete branch locally and remotely
	rmbranch = "!f(){ git branch -d ${1} && git push origin --delete ${1}; };f"
	# Show recent branches: https://twitter.com/djm_/status/961289486721339392
	recent = for-each-ref --sort=-committerdate --count=10 --format='%(refname:short)' refs/heads/
	snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	remotes = remote -v
	pruneremote = remote prune origin

	co = checkout
	# Switch to a branch, creating it if necessary
	go = checkout -B


	# Rebase/ Merge
	# Interactive rebase with the given number of latest commits
	# reb = "!git rebase -i `git merge-base HEAD master`"
	# https://stackoverflow.com/questions/27116671/automatically-stash-save-pop-changes-on-git-rebase
	reb = "!git rebase -i --autosquash --autostash <tree-ish>"
	# dry run: Test merge for conflicts
	mergetest = "!f(){ git merge --no-commit --no-ff \"$1\"; git merge --abort; echo \"Merge aborted\"; };f "
	me = merge

[color]
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = green
	changed = red
	untracked = cyan

[color "diff-highlight"]
	oldNormal = "red bold"
	oldHighlight = "red bold 52"
	newNormal = "green bold"
	newHighlight = "green bold 22"

# URL shorthands
[url "https://github.com/"]
	insteadOf = "github:"
