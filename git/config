;; Personal Info {{{

[user]
  name = Jonathan D. Chang
  email = 6375175+jdkschang@users.noreply.github.com
  signingKey = 15158DA03649A630
[github]
  user = jdkschang

;; }}}
;; {{{

[core]
  filemode = true
  quotepath = false
  pager = diff-so-fancy | less --tabs=4 -RFX
  excludesFile = ~/.config/git/ignore
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

[hub]
  protocol = gpg

[http]
  sslVerify

;; }}}
;; Commands {{{

[help]
  autocorrect = 1

[fetch]
  prune = true

[push]
  default = current

[pull]
  rebase = true

[rebase]
  autoStash = true

;; }}}
[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	# View the current working tree status using the short format
	s = status -s
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"
	# Clone a repository including all submodules
	c = clone --recursive
	# Commit all changes
	ca = !git add -A && git commit -av
	# Switch to a branch, creating it if necessary
	go = checkout -B
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	brs = branch -a
	remotes = remote -v
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	# Remove branches that have already been merged with master
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	wc = whatchanged --abbrev-commit --date=relative --date-order --pretty='format:%Cgreen%h %Cblue%ar %Credby %an%Creset -- %s' -n 45
  ll = log --graph --date=relative --topo-order --pretty='format:%C(yellow)%h%C(yellow)%d %Cblue%ar %Cgreenby %an%Creset -- %s'

  co = checkout
  b = branch
  ci = commit
  st = status
  me = merge
  dm = log --oneline --decorate --color --graph head ^master
  standup = log --since='yesterday' --author='Jonathan D Chang'
  lg = log --color --graph --pretty=format:'%C(yellow)%h%Creset -%C(auto)%d%Creset %s %C(bold blue)(%cr) %Cred<%an>%Creset' --abbrev-commit
  latest = for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short) [%(committername)]'

[apply]
  whitespace = fix

[color]
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = green
	changed = red
	untracked = cyan
[color "diff-highlight"]
  oldNormal = "red bold"
  oldHighlight = "red bold 52"
  newNormal = "green bold"
  newHighlight = "green bold 22"

# URL shorthands
[url "git@github.com:jdkschang/"]
	insteadOf = "jdkschang:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "https://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"
[include]
  path = ~/.config/git/config.local
[diff]
  tool = Kaleidoscope
[difftool]
  prompt = false
[difftool "Kaleidoscope"]
  cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[merge]
  tool = Kaleidoscope
  keepBackup = false
[mergetool]
  prompt = false
  keepBackup = false
[mergetool "Kaleidoscope"]
  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
  trustExitCode = true
[commit]
  template = ~/.config/git/message
  gpgSign = true
[gpg]
	program = /usr/local/bin/gpg
